<?php
/**
 * HotelsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lite API
 *
 * lite api hotel booking api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HotelsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HotelsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getData' => [
            'application/json',
        ],
        'hotelsHotelIdGet' => [
            'application/json',
        ],
        'hotelsPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getData
     *
     * Search by Destination/Hotel
     *
     * @param  string $country_code country code Alpha-2 code (example US, RU, CN) (required)
     * @param  string $hotel_name hotel name (optional)
     * @param  string $city_name city name (optional)
     * @param  float $limit limit results (max value 1000) (optional)
     * @param  float $offset results offset (optional)
     * @param  float $latitude latitude geo coordinates (optional)
     * @param  float $longitude longtude geo coordinates (optional)
     * @param  float $distance the distance starting from the selected geopgraphic point (optional)
     * @param  string $iata_code airport iata code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetData200Response|\OpenAPI\Client\Model\GetData400Response|\OpenAPI\Client\Model\GetData401Response
     */
    public function getData($country_code, $hotel_name = null, $city_name = null, $limit = null, $offset = null, $latitude = null, $longitude = null, $distance = null, $iata_code = null, string $contentType = self::contentTypes['getData'][0])
    {
        list($response) = $this->getDataWithHttpInfo($country_code, $hotel_name, $city_name, $limit, $offset, $latitude, $longitude, $distance, $iata_code, $contentType);
        return $response;
    }

    /**
     * Operation getDataWithHttpInfo
     *
     * Search by Destination/Hotel
     *
     * @param  string $country_code country code Alpha-2 code (example US, RU, CN) (required)
     * @param  string $hotel_name hotel name (optional)
     * @param  string $city_name city name (optional)
     * @param  float $limit limit results (max value 1000) (optional)
     * @param  float $offset results offset (optional)
     * @param  float $latitude latitude geo coordinates (optional)
     * @param  float $longitude longtude geo coordinates (optional)
     * @param  float $distance the distance starting from the selected geopgraphic point (optional)
     * @param  string $iata_code airport iata code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetData200Response|\OpenAPI\Client\Model\GetData400Response|\OpenAPI\Client\Model\GetData401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataWithHttpInfo($country_code, $hotel_name = null, $city_name = null, $limit = null, $offset = null, $latitude = null, $longitude = null, $distance = null, $iata_code = null, string $contentType = self::contentTypes['getData'][0])
    {
        $request = $this->getDataRequest($country_code, $hotel_name, $city_name, $limit, $offset, $latitude, $longitude, $distance, $iata_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetData200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetData200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetData200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetData400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetData400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetData400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\GetData401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetData401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetData401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetData200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetData200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetData400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetData401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDataAsync
     *
     * Search by Destination/Hotel
     *
     * @param  string $country_code country code Alpha-2 code (example US, RU, CN) (required)
     * @param  string $hotel_name hotel name (optional)
     * @param  string $city_name city name (optional)
     * @param  float $limit limit results (max value 1000) (optional)
     * @param  float $offset results offset (optional)
     * @param  float $latitude latitude geo coordinates (optional)
     * @param  float $longitude longtude geo coordinates (optional)
     * @param  float $distance the distance starting from the selected geopgraphic point (optional)
     * @param  string $iata_code airport iata code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataAsync($country_code, $hotel_name = null, $city_name = null, $limit = null, $offset = null, $latitude = null, $longitude = null, $distance = null, $iata_code = null, string $contentType = self::contentTypes['getData'][0])
    {
        return $this->getDataAsyncWithHttpInfo($country_code, $hotel_name, $city_name, $limit, $offset, $latitude, $longitude, $distance, $iata_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataAsyncWithHttpInfo
     *
     * Search by Destination/Hotel
     *
     * @param  string $country_code country code Alpha-2 code (example US, RU, CN) (required)
     * @param  string $hotel_name hotel name (optional)
     * @param  string $city_name city name (optional)
     * @param  float $limit limit results (max value 1000) (optional)
     * @param  float $offset results offset (optional)
     * @param  float $latitude latitude geo coordinates (optional)
     * @param  float $longitude longtude geo coordinates (optional)
     * @param  float $distance the distance starting from the selected geopgraphic point (optional)
     * @param  string $iata_code airport iata code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataAsyncWithHttpInfo($country_code, $hotel_name = null, $city_name = null, $limit = null, $offset = null, $latitude = null, $longitude = null, $distance = null, $iata_code = null, string $contentType = self::contentTypes['getData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetData200Response';
        $request = $this->getDataRequest($country_code, $hotel_name, $city_name, $limit, $offset, $latitude, $longitude, $distance, $iata_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getData'
     *
     * @param  string $country_code country code Alpha-2 code (example US, RU, CN) (required)
     * @param  string $hotel_name hotel name (optional)
     * @param  string $city_name city name (optional)
     * @param  float $limit limit results (max value 1000) (optional)
     * @param  float $offset results offset (optional)
     * @param  float $latitude latitude geo coordinates (optional)
     * @param  float $longitude longtude geo coordinates (optional)
     * @param  float $distance the distance starting from the selected geopgraphic point (optional)
     * @param  string $iata_code airport iata code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataRequest($country_code, $hotel_name = null, $city_name = null, $limit = null, $offset = null, $latitude = null, $longitude = null, $distance = null, $iata_code = null, string $contentType = self::contentTypes['getData'][0])
    {

        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling getData'
            );
        }










        $resourcePath = '/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hotel_name,
            'hotelName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city_name,
            'cityName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country_code,
            'countryCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latitude,
            'latitude', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $longitude,
            'longitude', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iata_code,
            'iataCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation hotelsHotelIdGet
     *
     * Get Room Availability &amp; Rates for a Hotel ID
     *
     * @param  int $hotel_id hotel_id (required)
     * @param  string $checkin checkin (optional)
     * @param  string $checkout checkout (optional)
     * @param  int $adults adults (optional)
     * @param  string $guest_nationality guest_nationality (optional)
     * @param  string $currency currency (optional)
     * @param  string $session_id session_id (optional)
     * @param  string $traveler_id traveler unique id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsHotelIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HotelsHotelIdGet200Response|object|\OpenAPI\Client\Model\GetData401Response
     */
    public function hotelsHotelIdGet($hotel_id, $checkin = null, $checkout = null, $adults = null, $guest_nationality = null, $currency = null, $session_id = null, $traveler_id = null, string $contentType = self::contentTypes['hotelsHotelIdGet'][0])
    {
        list($response) = $this->hotelsHotelIdGetWithHttpInfo($hotel_id, $checkin, $checkout, $adults, $guest_nationality, $currency, $session_id, $traveler_id, $contentType);
        return $response;
    }

    /**
     * Operation hotelsHotelIdGetWithHttpInfo
     *
     * Get Room Availability &amp; Rates for a Hotel ID
     *
     * @param  int $hotel_id (required)
     * @param  string $checkin (optional)
     * @param  string $checkout (optional)
     * @param  int $adults (optional)
     * @param  string $guest_nationality (optional)
     * @param  string $currency (optional)
     * @param  string $session_id (optional)
     * @param  string $traveler_id traveler unique id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsHotelIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HotelsHotelIdGet200Response|object|\OpenAPI\Client\Model\GetData401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function hotelsHotelIdGetWithHttpInfo($hotel_id, $checkin = null, $checkout = null, $adults = null, $guest_nationality = null, $currency = null, $session_id = null, $traveler_id = null, string $contentType = self::contentTypes['hotelsHotelIdGet'][0])
    {
        $request = $this->hotelsHotelIdGetRequest($hotel_id, $checkin, $checkout, $adults, $guest_nationality, $currency, $session_id, $traveler_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HotelsHotelIdGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HotelsHotelIdGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HotelsHotelIdGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\GetData401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetData401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetData401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HotelsHotelIdGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HotelsHotelIdGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetData401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hotelsHotelIdGetAsync
     *
     * Get Room Availability &amp; Rates for a Hotel ID
     *
     * @param  int $hotel_id (required)
     * @param  string $checkin (optional)
     * @param  string $checkout (optional)
     * @param  int $adults (optional)
     * @param  string $guest_nationality (optional)
     * @param  string $currency (optional)
     * @param  string $session_id (optional)
     * @param  string $traveler_id traveler unique id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsHotelIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hotelsHotelIdGetAsync($hotel_id, $checkin = null, $checkout = null, $adults = null, $guest_nationality = null, $currency = null, $session_id = null, $traveler_id = null, string $contentType = self::contentTypes['hotelsHotelIdGet'][0])
    {
        return $this->hotelsHotelIdGetAsyncWithHttpInfo($hotel_id, $checkin, $checkout, $adults, $guest_nationality, $currency, $session_id, $traveler_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hotelsHotelIdGetAsyncWithHttpInfo
     *
     * Get Room Availability &amp; Rates for a Hotel ID
     *
     * @param  int $hotel_id (required)
     * @param  string $checkin (optional)
     * @param  string $checkout (optional)
     * @param  int $adults (optional)
     * @param  string $guest_nationality (optional)
     * @param  string $currency (optional)
     * @param  string $session_id (optional)
     * @param  string $traveler_id traveler unique id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsHotelIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hotelsHotelIdGetAsyncWithHttpInfo($hotel_id, $checkin = null, $checkout = null, $adults = null, $guest_nationality = null, $currency = null, $session_id = null, $traveler_id = null, string $contentType = self::contentTypes['hotelsHotelIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HotelsHotelIdGet200Response';
        $request = $this->hotelsHotelIdGetRequest($hotel_id, $checkin, $checkout, $adults, $guest_nationality, $currency, $session_id, $traveler_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hotelsHotelIdGet'
     *
     * @param  int $hotel_id (required)
     * @param  string $checkin (optional)
     * @param  string $checkout (optional)
     * @param  int $adults (optional)
     * @param  string $guest_nationality (optional)
     * @param  string $currency (optional)
     * @param  string $session_id (optional)
     * @param  string $traveler_id traveler unique id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsHotelIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function hotelsHotelIdGetRequest($hotel_id, $checkin = null, $checkout = null, $adults = null, $guest_nationality = null, $currency = null, $session_id = null, $traveler_id = null, string $contentType = self::contentTypes['hotelsHotelIdGet'][0])
    {

        // verify the required parameter 'hotel_id' is set
        if ($hotel_id === null || (is_array($hotel_id) && count($hotel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hotel_id when calling hotelsHotelIdGet'
            );
        }









        $resourcePath = '/hotels/{hotelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $checkin,
            'checkin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $checkout,
            'checkout', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $adults,
            'adults', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $guest_nationality,
            'guestNationality', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $session_id,
            'sessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $traveler_id,
            'travelerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($hotel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'hotelId' . '}',
                ObjectSerializer::toPathValue($hotel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation hotelsPost
     *
     * Get Minimum Price for Available Hotels
     *
     * @param  string $rid rid (optional)
     * @param  \OpenAPI\Client\Model\HotelsPostRequest $hotels_post_request hotels_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HotelsPost200Response|object|\OpenAPI\Client\Model\HotelsPost401Response
     */
    public function hotelsPost($rid = null, $hotels_post_request = null, string $contentType = self::contentTypes['hotelsPost'][0])
    {
        list($response) = $this->hotelsPostWithHttpInfo($rid, $hotels_post_request, $contentType);
        return $response;
    }

    /**
     * Operation hotelsPostWithHttpInfo
     *
     * Get Minimum Price for Available Hotels
     *
     * @param  string $rid (optional)
     * @param  \OpenAPI\Client\Model\HotelsPostRequest $hotels_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HotelsPost200Response|object|\OpenAPI\Client\Model\HotelsPost401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function hotelsPostWithHttpInfo($rid = null, $hotels_post_request = null, string $contentType = self::contentTypes['hotelsPost'][0])
    {
        $request = $this->hotelsPostRequest($rid, $hotels_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HotelsPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HotelsPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HotelsPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HotelsPost401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HotelsPost401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HotelsPost401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HotelsPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HotelsPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HotelsPost401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hotelsPostAsync
     *
     * Get Minimum Price for Available Hotels
     *
     * @param  string $rid (optional)
     * @param  \OpenAPI\Client\Model\HotelsPostRequest $hotels_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hotelsPostAsync($rid = null, $hotels_post_request = null, string $contentType = self::contentTypes['hotelsPost'][0])
    {
        return $this->hotelsPostAsyncWithHttpInfo($rid, $hotels_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hotelsPostAsyncWithHttpInfo
     *
     * Get Minimum Price for Available Hotels
     *
     * @param  string $rid (optional)
     * @param  \OpenAPI\Client\Model\HotelsPostRequest $hotels_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hotelsPostAsyncWithHttpInfo($rid = null, $hotels_post_request = null, string $contentType = self::contentTypes['hotelsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HotelsPost200Response';
        $request = $this->hotelsPostRequest($rid, $hotels_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hotelsPost'
     *
     * @param  string $rid (optional)
     * @param  \OpenAPI\Client\Model\HotelsPostRequest $hotels_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hotelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function hotelsPostRequest($rid = null, $hotels_post_request = null, string $contentType = self::contentTypes['hotelsPost'][0])
    {




        $resourcePath = '/hotels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($rid !== null) {
            $headerParams['rid'] = ObjectSerializer::toHeaderValue($rid);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($hotels_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($hotels_post_request));
            } else {
                $httpBody = $hotels_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
